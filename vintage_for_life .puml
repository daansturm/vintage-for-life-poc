@startuml
class DBadres {
- int id
- String straat
- String huisnummer
- String plaats
- String postcode
- String land
+ <<Create>> DBadres(String,String,String,String,String)
+ <<Create>> DBadres(String,String,String,String,String,String)
+ String getStraat()
+ String getHuisnummer()
+ String getPlaats()
+ String getPostcode()
+ String getLand()
+ String getId()
+ void Print()
}


class APPRoutes {
- {static} List<DBroute> routeList
- {static} List<DBlevering> leveringList
- {static} List<DBretour> retourList
+ {static} void SQLRoutes()
+ {static} void SQLUnAssignedLeveringen()
+ {static} void SQLUnAssignedRetour()
+ {static} void MakeRoute()
+ {static} List<DBlevering> getUnAssignedLevering()
+ {static} List<DBretour> getUnAssignedRetour()
+ {static} List<DBroute> getRoutes()
}


class DBConnection {
- {static} Connection connection
+ {static} Connection getConnection()
+ {static} DBbestelling getSQLDBproduct(DBbestelling)
+ {static} DBlevering getSQLDBbestelling(DBlevering)
+ {static} List<DBlevering> getSQLDBlevering()
+ {static} DBroute getSQLDBlevering(DBroute)
+ {static} List<DBretour> getSQLDBRetour()
+ {static} DBroute getSQLDBRetour(DBroute)
+ {static} List<DBroute> getSQLDBroute()
+ {static} DBadres getSQLBeginEindAdress(int)
+ {static} void setSQLDBlevering(DBlevering)
+ {static} DBroute setSQLRoute(DBroute)
}


class SceneController {
- {static} Stage stage
- {static} Scene scene
- {static} Parent root
+ void ShowLoginScreen(ActionEvent)
+ void ShowOverzichtRoutes(ActionEvent)
+ void ShowRouteVisualisatie(ActionEvent,DBroute,int)
}


class LoginScreen {
+ TextField emailTextField
+ PasswordField passwordField
+ Label notificationLabel
- SceneController sceneController
- Connection connection
+ <<Create>> LoginScreen()
~ void Login(ActionEvent)
- boolean authenticateUser(String,String)
}


class Geocode {
- {static} Geocode instance
+ <<Create>> Geocode()
+ {static} Geocode getInstance()
+ GraphhopperLocatie convertAdres(GraphhopperLocatie)
}


class Router {
- {static} Router instance
- List<double[]> points
- String profile
- <<Create>> Router()
+ {static} Router getInstance()
+ void addPoint(float,float)
+ void addPoints(List<double[]>)
+ List<double[]> getPoints()
+ void setProfile(String)
+ String getProfile()
+ String getRoute()
+ void drawRouteOnMap()
- void drawMap(double[][])
}


class RouteInfo {
- RouteListener listener
- BorderPane borderpane
- Label route
- Label route_info
- int ID
- SceneController Scene
- DBroute dBroute
~ void Select(MouseEvent)
~ void ShowVisualisation(ActionEvent)
+ void setID(int)
+ void setRouteSelectionListener(RouteListener)
+ void setDBroute(DBroute,int)
+ void setSelected()
+ void setUnseleced()
+ void getID(int)
}


class DBretour {
- int id
- int bestelling_id
- String status
- String reden
- String opmerking
- LocalDateTime retourdatum
- DBadres adres
- DBbestelling bestelling
+ <<Create>> DBretour(int,int,String,String,String,LocalDateTime,String,String,String,String,String)
+ <<Create>> DBretour(String,String,String,String,String,String,String,String,String,String,String)
+ void VoegBestellingToe(String,String,String,String,String,String,String,String,String)
+ DBadres getAdres()
+ LocalDateTime getRetourdatum()
+ String getId()
+ boolean equalsDate(LocalDateTime)
+ void Print()
}


class LeveringRetour {
- Label LeveringRetourtxt
- Label plaatstxt
- Label adrestxt
- Label postcodetxt
- Label landtxt
- int id
+ Label getLeveringLabel()
+ Label getPlaatstLabel()
+ Label getAdrestLabel()
+ Label getLandLabel()
+ Label getPostcodetxt()
+ void setID(int)
+ int getId()
}


class DBproduct {
- int id
- String naam
- String beschrijving
- String afmeting
- String gewicht
- int aantal
~ <<Create>> DBproduct(int,String,String,String,String,int)
+ String getId()
+ void Print()
}


class GraphhopperLocatie {
- DBadres adres
- String lon
- String lat
- String id
- String naam
+ <<Create>> GraphhopperLocatie(DBadres,String,String,String)
+ <<Create>> GraphhopperLocatie(DBadres,String,String)
+ <<Create>> GraphhopperLocatie(DBlevering,String,String)
+ <<Create>> GraphhopperLocatie(DBretour,String,String)
+ void setGraphhopperLocatie(GraphhopperLocatie)
+ void setLonLan(String,String)
+ DBadres getAdres()
+ String getLon()
+ String getLat()
+ String getNaam()
+ String getId()
+ void Print()
}


class VintageForLifeAPP {
- Connection connection
+ void start(Stage)
+ {static} void main(String[])
}


class RouteVisualisatie {
- SceneController Scene
- Label routetxt
- Label route_infotxt
- ScrollPane locaties
- DBroute DBroute
- int routeID
+ void setRoute(DBroute,int)
+ void initialize()
- void Logout(ActionEvent)
~ void Routes(ActionEvent)
}


class DBbestelling {
- int id
- int klantId
- String status
- boolean installatieservice
- DBadres adres
- List<DBproduct> producten
+ <<Create>> DBbestelling(int,int,String,boolean,String,String,String,String,String)
+ void voegProductToe(String,String,String,String,String,String)
+ void setBestelling(DBbestelling)
+ DBadres getAdres()
+ DBproduct getProduct(int)
+ String getId()
+ int getProductCount()
+ void Print()
}


interface DBobject {
+ String getId()
+ void Print()
}

class DBlevering {
- int id
- String status
~ LocalDateTime bezorgdatum
- float lon
- float lat
- List<DBbestelling> bestellingen
+ <<Create>> DBlevering(int,String,String)
+ void voegBestellingToe(String,String,String,String,String,String,String,String,String)
+ void setLonLan(float,float)
+ void setLevering(DBlevering)
+ DBadres getFirstAdres()
+ String getId()
+ LocalDateTime getBezorgdatum()
+ int getBestellingCount()
+ DBbestelling getBestelling(int)
+ List<DBbestelling> getBestellingen()
+ boolean equalsDate(LocalDateTime)
+ void Print()
}


class DBroute {
- int id
- String status
- LocalDateTime datum
- String priotisering
- List<DBlevering> leveringen
- List<DBretour> retouren
- DBadres beginadres
- DBadres eindadres
- List<GraphhopperLocatie> locaties
- List<String> prio_index
- Geocode gc
+ <<Create>> DBroute()
+ <<Create>> DBroute(LocalDate)
+ <<Create>> DBroute(int,String,String,String)
+ <<Create>> DBroute(int,String,LocalDateTime,String)
+ void MaakGraphhopperList()
- boolean checkGrapphopperList(List<String>)
- void maakPriotisering(List<GraphhopperLocatie>)
+ void setRoute(DBroute)
+ void setId(int)
+ void setBeginadres(DBadres)
+ void setEindadres(DBadres)
+ void voegLeveringToe(DBlevering)
+ void voegRetourToe(DBretour)
+ DBadres getBeginadres()
+ DBadres getEindadres()
+ String getStatus()
+ String getPriotisering()
+ String getDatum()
+ LocalDateTime getDatumTijd()
+ List<DBlevering> getLeveringen()
+ List<DBretour> getRetouren()
+ String getId()
+ List<GraphhopperLocatie> getLocaties()
+ String getRoute_info()
+ void Print()
}


class OverzichtRoutes {
- Connection connection
- SceneController Scene
- ScrollPane Leveringen
- ScrollPane Retouren
- ScrollPane Routes
- Stage stage
- Scene scene
- Parent root
~ List<RouteInfo> routeInfoList
~ List<DBroute> routeList
~ List<DBlevering> leveringList
~ List<VBox> routeLevering
~ List<VBox> routeRetour
~ List<Node> Route
+ <<Create>> OverzichtRoutes()
- void initialize()
- void addRoutes()
- void addLeveringen()
- void addRetour()
+ void onRouteSelected(int)
~ void Logout(ActionEvent)
~ void Routes(ActionEvent)
}


interface RouteListener {
~ void onRouteSelected(int)
}



DBobject <|.. DBadres
DBobject <|.. DBretour
DBobject <|.. DBproduct
DBobject <|.. GraphhopperLocatie
Application <|-- VintageForLifeAPP
DBobject <|.. DBbestelling
DBobject <|.. DBlevering
DBobject <|.. DBroute
RouteListener <|.. OverzichtRoutes
@enduml